using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Reflection;
using System;

public class Monster
{
    public static int monsterTotalCount;

    public string name;
    private int hp;
    private int maxhp;
    private float atk;

    public int Hp
    {
        get { return hp; }
        set { hp = value; }
    }

    public void Attack()
    {
        Debug.Log(name + "이 공격");
    }
    public void Hit()
    {
        Debug.Log("몬스터 맞았다");
        Hp -= 10;
    }
}

public class Npc
{
    public string name;
    public void Attack()
    {
        Debug.Log(name + "은 공격하지 않는다");
    }
    public void Hit()
    {
        Debug.Log("NPC 맞았다");
    }
}




public class GameManager : MonoBehaviour
{
    Monster monsterA;
    Monster monsterB;
    public string methodName;

    public Box box;
    //리플렉션
    //Reflection : 메타적인 데이터를 가져오는 문법

    void Start()
    {
        monsterA = new Monster();
        monsterB = new Monster();
        monsterA.name = "슬라임";

        monsterA.Hp = 100;
        monsterB.Hp = 300;

        Type type = monsterB.GetType();

        FieldInfo hpFieldInfo = type.GetField("hp", BindingFlags.NonPublic | BindingFlags.Instance);

        hpFieldInfo.SetValue(monsterB, 50);
        Debug.Log(hpFieldInfo.GetValue(monsterA));
        Debug.Log(hpFieldInfo.GetValue(monsterB));


        //  MethodInfo attakcMethodInfo = type.GetMethod("Attack");
        //  attakcMethodInfo.Invoke(monsterA,null);

        Npc npc = new Npc();
        npc.name = "상인";
        

        CustomInvoke(monsterA, methodName);
        CustomInvoke(npc, methodName);
        CustomInvoke(box, methodName);
    }


    public static Action CustomInvoke(object obj, string methodName)
    {
        Type type = obj.GetType();
        MethodInfo attakcMethodInfo = type.GetMethod(methodName);
        attakcMethodInfo?.Invoke(obj, null);
        
        return () => { attakcMethodInfo?.Invoke(obj, null); };
    }

}

